generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// Payment Logs - for detailed logging of all payment events
model PaymentLog {
  id          Int      @id @default(autoincrement())
  timestamp   DateTime @default(now())
  level       String   // ERROR, WARN, INFO, DEBUG
  event       String   // payment_initiated, payment_approved, webhook_received, etc.
  gateway     String   // mercadopago, gocuotas, modo
  orderId     String?  @map("order_id")
  paymentId   String?  @map("payment_id")
  customerId  String?  @map("customer_id")
  amount      Float?
  currency    String   @default("ARS")
  status      String?
  metadata    Json?    // Additional data as JSON
  errorMessage String? @map("error_message")
  requestId   String?  @map("request_id")
  userAgent   String?  @map("user_agent")
  ipAddress   String?  @map("ip_address")
  createdAt   DateTime @default(now()) @map("created_at")

  // Optional relation to transaction
  transactionId Int? @map("transaction_id")
  transaction   PaymentTransaction? @relation("TransactionLogs", fields: [transactionId], references: [id])

  @@index([gateway, timestamp])
  @@index([orderId])
  @@index([level, timestamp])
  @@index([event, gateway])
  @@index([transactionId])
  @@map("payment_logs")
}

// Payment Transactions - main transaction records
model PaymentTransaction {
  id              Int      @id @default(autoincrement())
  orderId         String   @unique @map("order_id")
  paymentId       String?  @map("payment_id")
  gateway         String   // mercadopago, gocuotas, modo
  customerId      String   @map("customer_id")
  customerEmail   String   @map("customer_email")
  amount          Float
  currency        String   @default("ARS")
  status          String   @default("pending") // pending, approved, rejected, cancelled, refunded
  items           Json     // Array of purchased items
  shippingAddress Json?    @map("shipping_address")
  metadata        Json?    // Additional transaction data
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  processedAt     DateTime? @map("processed_at")
  failureReason   String?  @map("failure_reason")

  // Relations
  logs PaymentLog[] @relation("TransactionLogs")

  @@index([gateway, status])
  @@index([createdAt])
  @@index([status, processedAt])
  @@index([customerEmail])
  @@map("payment_transactions")
}

// Analytics aggregated data (for performance)
model PaymentAnalytics {
  id                  Int      @id @default(autoincrement())
  date                DateTime 
  gateway             String
  totalTransactions   Int      @default(0) @map("total_transactions")
  successfulTransactions Int   @default(0) @map("successful_transactions")
  totalRevenue        Float  @default(0) @map("total_revenue")
  averageOrderValue   Float  @default(0) @map("average_order_value")
  errorCount          Int      @default(0) @map("error_count")
  createdAt           DateTime @default(now()) @map("created_at")
  updatedAt           DateTime @updatedAt @map("updated_at")

  @@unique([date, gateway])
  @@index([date])
  @@index([gateway, date])
  @@map("payment_analytics")
}

// Webhook delivery tracking
model WebhookDelivery {
  id           Int      @id @default(autoincrement())
  gateway      String
  event        String
  paymentId    String?  @map("payment_id")
  orderId      String?  @map("order_id")
  status       String   // pending, delivered, failed, retrying
  attempts     Int      @default(0)
  lastAttempt  DateTime? @map("last_attempt")
  response     Json?    // Response data from webhook
  errorMessage String?  @map("error_message")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  @@index([gateway, status])
  @@index([orderId])
  @@index([createdAt])
  @@map("webhook_deliveries")
}

// System configuration
model PaymentConfig {
  id          Int      @id @default(autoincrement())
  gateway     String   @unique
  isEnabled   Boolean  @default(true) @map("is_enabled")
  testMode    Boolean  @default(true) @map("test_mode")
  config      Json     // Gateway-specific configuration
  lastTested  DateTime? @map("last_tested")
  testResult  String?  @map("test_result") // passed, failed
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("payment_configs")
}

// Return and Exchange System
model ReturnRequest {
  id              Int      @id @default(autoincrement())
  requestId       String   @unique @map("request_id") // RET-XXXXXX
  orderNumber     String   @map("order_number")
  customerEmail   String   @map("customer_email")
  customerName    String   @map("customer_name")
  type            String   // change, return
  resolution      String   // coupon, refund
  status          String   @default("pending") // pending, approved, shipped, received, completed, rejected
  reason          String
  notes           String?
  couponCode      String?  @map("coupon_code")
  couponAmount    Float? @map("coupon_amount")
  refundAmount    Float? @map("refund_amount")
  shippingLabel   String?  @map("shipping_label")
  trackingNumber  String?  @map("tracking_number")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  processedAt     DateTime? @map("processed_at")

  // Relations
  items         ReturnItem[]
  notifications ReturnNotification[]
  coupon        Coupon?

  @@index([orderNumber])
  @@index([customerEmail])
  @@index([status])
  @@index([createdAt])
  @@map("return_requests")
}

model ReturnItem {
  id          Int      @id @default(autoincrement())
  returnId    Int      @map("return_id")
  productId   String   @map("product_id")
  productName String   @map("product_name")
  productImage String? @map("product_image")
  size        String
  quantity    Int
  price       Float 
  reason      String

  // Relations
  returnRequest ReturnRequest @relation(fields: [returnId], references: [id], onDelete: Cascade)

  @@index([returnId])
  @@map("return_items")
}

model ReturnNotification {
  id        Int      @id @default(autoincrement())
  returnId  Int      @map("return_id")
  type      String   // email, sms, whatsapp
  status    String   // sent, pending, failed
  content   String
  sentAt    DateTime? @map("sent_at")
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  returnRequest ReturnRequest @relation(fields: [returnId], references: [id], onDelete: Cascade)

  @@index([returnId])
  @@index([status])
  @@map("return_notifications")
}

model Coupon {
  id           Int      @id @default(autoincrement())
  code         String   @unique
  returnId     Int?     @unique @map("return_id")
  amount       Float 
  customerEmail String  @map("customer_email")
  status       String   @default("active") // active, used, expired, cancelled
  usageCount   Int      @default(0) @map("usage_count")
  maxUsage     Int      @default(1) @map("max_usage")
  expiryDate   DateTime @map("expiry_date")
  createdAt    DateTime @default(now()) @map("created_at")
  usedAt       DateTime? @map("used_at")
  orderUsedIn  String?  @map("order_used_in")

  // Relations
  returnRequest ReturnRequest? @relation(fields: [returnId], references: [id])

  @@index([code])
  @@index([customerEmail])
  @@index([status])
  @@index([expiryDate])
  @@map("coupons")
}

// Blog System Models
model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String?
  role      String   @default("user") // user, admin, editor
  password  String?  // For local auth
  image     String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  lastLogin DateTime? @map("last_login")

  // Relations
  posts Post[]

  @@index([email])
  @@index([role])
  @@map("users")
}

model Category {
  id             Int      @id @default(autoincrement())
  slug           String   @unique
  name           String
  description    String
  metaTitle      String   @map("meta_title")
  metaDescription String  @map("meta_description")
  featuredImage  String?  @map("featured_image")
  color          String   @default("bg-blue-500")
  icon           String   @default("üìÅ")
  isActive       Boolean  @default(true) @map("is_active")
  sortOrder      Int      @default(0) @map("sort_order")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  // Relations
  posts Post[]

  @@index([slug])
  @@index([isActive, sortOrder])
  @@map("categories")
}

model Post {
  id             Int      @id @default(autoincrement())
  slug           String   @unique
  title          String
  excerpt        String
  content        String   
  metaTitle      String?  @map("meta_title")
  metaDescription String? @map("meta_description")
  featuredImage  String?  @map("featured_image")
  isPublished    Boolean  @default(false) @map("is_published")
  readingTime    Int      @default(5) @map("reading_time")
  views          Int      @default(0)
  schemaType     String   @default("Article") @map("schema_type") // Article, FAQ, HowTo, Review

  // SEO and structured data
  faqItems       Json?    @map("faq_items") // For FAQ schema
  howToSteps     Json?    @map("how_to_steps") // For HowTo schema
  reviewRating   Json?    @map("review_rating") // For Review schema

  // Relations
  authorId   Int      @map("author_id")
  categoryId Int      @map("category_id")

  author   User     @relation(fields: [authorId], references: [id])
  category Category @relation(fields: [categoryId], references: [id])
  tags     PostTag[]

  // Timestamps
  publishedAt DateTime? @map("published_at")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  @@index([slug])
  @@index([isPublished, publishedAt])
  @@index([categoryId, isPublished])
  @@index([authorId])
  @@index([views])
  @@map("posts")
}

model Tag {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  slug      String   @unique
  color     String   @default("bg-gray-500")
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  posts PostTag[]

  @@index([slug])
  @@map("tags")
}

model PostTag {
  id     Int @id @default(autoincrement())
  postId Int @map("post_id")
  tagId  Int @map("tag_id")

  // Relations
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  tag  Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([postId, tagId])
  @@index([postId])
  @@index([tagId])
  @@map("post_tags")
}

// Blog Analytics
model PostAnalytics {
  id        Int      @id @default(autoincrement())
  postId    Int      @map("post_id")
  date      DateTime 
  views     Int      @default(0)
  clicks    Int      @default(0)
  shares    Int      @default(0)
  timeOnPage Int     @default(0) @map("time_on_page") // in seconds
  createdAt DateTime @default(now()) @map("created_at")

  @@unique([postId, date])
  @@index([date])
  @@index([postId, date])
  @@map("post_analytics")
}
